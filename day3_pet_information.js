// En este desaf칤o recibir치s una serie de tipos de mascotas junto con su edad.

// Dependiendo de estos 2 factores tendr치s que construir la funci칩n llamada getPetExerciseInfo la cual retornar치 una cadena de texto con la informaci칩n necesaria acerca de cuanto ejercicio necesita hacer cada tipo de mascota.

// La funci칩n recibir치 las siguientes mascotas:

// perro
// gato
// ave
// En caso de pasar una mascota la cual no sea de la lista deber치 retornar "Tipo de mascota inv치lida"

// Para cada tipo de mascota, la funci칩n retornar치 diferente informaci칩n basada en la edad.

// Perros
// Si la edad es menor al a침o, deber치 retornar "Los cachorros necesitan peque침as y frecuentes sesiones de juego"
// Si la edad es entre 1 y 7 a침os, deber치 retornar "Los perros a esta edad necesitan caminatas diarias y sesiones de juego"
// Si la edad es mayor a 7 a침os, deber치 retornar "Los perros viejos necesitan caminatas m치s cortas"
// gatos
// Si la edad es menor al a침o, deber치 retornar "Los gatitos necesitan frecuentes sesiones de juego"
// Si la edad es entre 1 y 7 a침os, deber치 retornar "Los gatos a esta edad necesitan jugar diariamente"
// Si la edad es mayor a 7 a침os, deber치 retornar "Los gatos viejos necesitan sesiones de juego m치s cortas"
// aves
// Si la edad es menor al a침o, deber치 retornar "Las aves j칩venes necesitan mucho espacio para volar"
// Si la edad es entre 1 y 7 a침os, deber치 retornar "Las aves necesitan jugar diariamente y un lugar para volar"
// Si la edad es mayor a 7 a침os, deber치 retornar "Las aves mayores necesitan descansar m치s, pero siguen ocupando un lugar para volar"
// Tendr치s inputs y outputs como los siguientes 游녢

// Ejemplo 1:

// Input: getPetExerciseInfo("perro", 3)
// Output: "Los perros a esta edad necesitan caminatas diarias y sesiones de juego"

// Ejemplo 2:

// Input: getPetExerciseInfo("gato", 8)
// Output: "Los gatos viejos necesitan sesiones de juego m치s cortas"

// Ejemplo 3:

// Input: getPetExerciseInfo("Mamut", 25)
// Output: "Tipo de mascota invalida"

const TAG = Symbol("identifier");
const err = () => "Tipo de mascota inv치lida";

function Matchable(tag, pvd) {
  this[TAG] = tag;
  this.match = function (pattern) {
    if (!this || !this[TAG]) return err();
    return tag in pattern
      ? pattern[tag](pvd)
      : "_" in pattern
      ? pattern["_"]()
      : err();
  };
}

const comments = {
  dog: {
    young: "Los cachorros necesitan peque침as y frecuentes sesiones de juego",
    adult:
      "Los perros a esta edad necesitan caminatas diarias y sesiones de juego",
    old: "Los perros viejos necesitan caminatas m치s cortas",
  },
  cat: {
    young: "Los gatitos necesitan frecuentes sesiones de juego",
    adult: "Los gatos a esta edad necesitan jugar diariamente",
    old: "Los gatos viejos necesitan sesiones de juego m치s cortas",
  },
  bird: {
    young: "Las aves j칩venes necesitan mucho espacio para volar",
    adult: "Las aves necesitan jugar diariamente y un lugar para volar",
    old: "Las aves mayores necesitan descansar m치s, pero siguen ocupando un lugar para volar",
  },
};

const getAgeMatch = (age) => {
  return {
    [age < 1]: ({ young }) => young,
    [age >= 1 && age <= 7]: ({ adult }) => adult,
    [age > 7]: ({ old }) => old,
    _: () => err(),
  }
}

function getPetExerciseInfo(type, age) {

  const pet = new Matchable(type, age);

  return pet.match({
    perro: (age) => new Matchable(true, comments.dog).match(getAgeMatch(age)),
    gato: (age) => new Matchable(true, comments.dog).match(getAgeMatch(age)),
    ave: (age) => new Matchable(true, comments.dog).match(getAgeMatch(age)),
    _: () => err(),
  });
}

const response = getPetExerciseInfo("gato", 5);
console.log(response);
